# this is just a handy global while fucking with the screen drawers
debug = Sprite();
fun printf (output) {
  debug.SetImage(Image.Text(output, 0.5, 0.5, 0.5, 1));
}

# used for drawing alternate mode up (or, you know, not)
status = "normal";

# distro info block
distro.name = "Fedora";
distro.version = "40";
distro.edition = "Workstation Edition";
distro.box = "box_fedora.png";

# this will need to match the steps in the shell script that rotated the bar
spinline.steps = 16;
# used for determining which set of squares to show on main and alternate screens.
style = "pro";
spinline.source = "spinner-srv"; # change this to spinner-pro if you like

# start with two colors (from 1x1 pngs)
white = Image("white.png");
gray = Image("gray.png");

# assuming a 640x480 screen, 60 should be the spinner centerline, so let's do some math.
# 30 is the largest common denominator there, so.
# that gets us 16 segments, and the bottom piece takes two.
H = Window.GetHeight();
W = Window.GetWidth();
spinline.center = H - ((H / 16) * 2);
spinline.alt = H - ((H/4) * 3);

# paint lower window.
bottom_size = H - spinline.center;
bottom = Sprite(gray.Scale(W, bottom_size));
bottom.SetX(0);
bottom.SetY(spinline.center);
bottom.SetZ(-6000);

# paint upper window.
top = Sprite(white.Scale(W, spinline.center));
top.SetX(0);
top.SetY(0);
top.SetZ(-10000);

# paint initial spinner
statbars_z = -900;
# scaling off 480 pixels high again
spinline.scale = H / 48;
for (i = 0 ; i < spinline.steps ; i++) {
  spinline.image[i] = Image(spinline.source + i + ".png").Scale(W, spinline.scale);
}
spinline.sprite = Sprite();
spinline.sprite.SetOpacity(0);
spinline.sprite.SetImage(spinline.image[0]);
spinline.sprite.SetPosition(0, 0 - spinline.scale, statbars_z);

# move the spinner
fun spinline_Move(pos) {
  global.spinline;
  spinline.sprite.SetOpacity(0);
  spinline.sprite.SetY(pos - (spinline.scale / 2));
  spinline.sprite.SetOpacity(1);
}
spinline_Move(spinline.center);

# animate the spinner
fun spinline_Animate (time) {
 spinline.sprite.SetImage(spinline.image[Math.Int(time * 2 % spinline.steps)]);
}

# paint boot progress
progress_box.image = Image("progress-box.png");
# divide lower area
bottom_step = Math.Int(bottom_size / 6);
# determine independent X/Y scaling to *deal* with protrait displays.
progress_box.scaleX = Math.Int(W / 3.939393);
progress_box.scaleY = Math.Int(bottom_step);
progress_box.sprite = Sprite(progress_box.image.Scale(progress_box.scaleX, progress_box.scaleY));
progress_box.posX = (W / 2) - (progress_box.scaleX / 2);
progress_box.posY = (spinline.center + bottom_step * 1.5);
progress_box.sprite.SetPosition(progress_box.posX, progress_box.posY, statbars_z);

# draw the progress bar *inside* the box
progress_bar.source = Image("progress-bar.png");
progress_bar.scaleX = progress_box.scaleX - 2;
progress_bar.scaleY = progress_box.scaleY - 4;
progress_bar.scaled = progress_bar.source.Scale(progress_bar.scaleX, progress_bar.scaleY);
progress_bar.sprite = Sprite();
progress_bar.posX = (progress_box.posX + 2);
progress_bar.posY = (progress_box.posY + 2);
progress_bar.sprite.SetPosition(progress_bar.posX, progress_bar.posY, statbars_z + 10);

# draw the progress bar by uncropping it
fun progbar_Advance (progress) {
  progress_bar.sprite.SetImage(progress_bar.scaled.Crop(0, 0, progress_bar.scaleX * progress, progress_bar.scaleY));
}

#----------------------------------------- Message --------------------------------
message_sprite = Sprite();

fun message (text) {
  global.W;
  global.message_sprite;
  global.spinline;
  global.bottom_step;

  local.source;
  local.scalef;
  local.scaled;

  source = Image.Text(text, 0, 0, 0, 1, "Libre Franklin Light 40");
  # proportinally scale the font to the height of bottom_step
  scalef = (bottom_step * 1.1) / source.GetHeight();
  scaled = source.Scale(source.GetWidth() * scalef, (bottom_step * 1.1));
  message_sprite.SetOpacity(0);
  message_sprite.SetImage(scaled);
  # position below the progress bar so it doesn't look really off. (it's really off.)
  message_sprite.SetPosition((W / 2) - (scaled.GetWidth() / 2), spinline.center + bottom_step * 3.5);
  message_sprite.SetOpacity(1);
}

# we should do something smarter, to hide the *previous* text, but...sounds hard.
fun starting (text) {
  message("Starting up...");
}

# we handle messages by replacing the startup text.
starting("up");

Plymouth.SetMessageFunction(message);
Plymouth.SetHideMessageFunction(starting);

# main images...
screen_ratio = H / W;
screen_center.x = W / 2;
screen_center.y = H / 2;
image = [];
mainimage_z = -5000;

# leaving this here for now because handy positioning lines
hline = Image("black.png").Scale(W, 1);
vline = Image("black.png").Scale(1, H);

fun image_sprite (id, origScaleX, origScaleY, origMidX, origMidY, squareEdge, origSquareX, origSquareY) {
  local.pos_sprite;
  global.H;
  global.screen_center;
  global.mainimage_z;
  global.image;
  # this is calculating the box that holds the OS logo, and everything can shift based on that.
  # the *sprite* is handy for debugging.
  pos_sprite.Y = Math.Int((H / 16) * 2);
  pos_sprite.size_edge = Math.Int((H / 16) * 6);	# because...it's a square
  pos_sprite.X = Math.Int(screen_center.x - (pos_sprite.size_edge / 2));
  #image[id].pos_sprite.sprite = Sprite(Image("black.png").Scale(pos_sprite.size_edge, pos_sprite.size_edge));
  #image[id].pos_sprite.sprite.SetPosition(pos_sprite.X, pos_sprite.Y, mainimage_z - 10);

  local.scale_factor;
  scale_factor = pos_sprite.size_edge / squareEdge;	# scale by the target box you can't easily see...

  local.mainimage;
  mainimage.source = Image("squares-" + id + ".png");
  mainimage.sizeX = Math.Int(scale_factor * mainimage.source.GetWidth());
  mainimage.sizeY = Math.Int(scale_factor * mainimage.source.GetHeight());
  mainimage.scaled = mainimage.source.Scale(mainimage.sizeX, mainimage.sizeY);
  image[id].sprite = Sprite();
  image[id].sprite.SetOpacity(0);
  image[id].sprite.SetImage(mainimage.scaled);
  # calculate these using the origSquareX/Y now.
  mainimage.posX = Math.Int(pos_sprite.X - (origSquareX * scale_factor));
  mainimage.posY = Math.Int(pos_sprite.Y - (origSquareY * scale_factor));
  image[id].sprite.SetPosition(mainimage.posX, mainimage.posY, mainimage_z);

  # handle the box inlay image
  global.distro;
  global.boxfill; # the alt images use the same box fill source (distro logo)
  local.boxspace;
  boxfill.source = Image(distro.box);
  # size we wish to put in box
  boxfill.px = Math.Int(pos_sprite.size_edge * 0.9);
  boxfill.scaled = boxfill.source.Scale(boxfill.px, boxfill.px);
  # place the box in the center of the empty space.
  boxspace.X = Math.Int(pos_sprite.X + (pos_sprite.size_edge / 2));
  boxspace.Y = Math.Int(pos_sprite.Y + (pos_sprite.size_edge / 2));
  boxfill.posX = boxspace.X - (boxfill.px / 2);
  boxfill.posY = boxspace.Y - (boxfill.px / 2);
  image[id].boxfill_sprite = Sprite();
  image[id].boxfill_sprite.SetOpacity(0);
  image[id].boxfill_sprite.SetImage(boxfill.scaled);
  image[id].boxfill_sprite.SetPosition(boxfill.posX, boxfill.posY, mainimage_z + 1);

  # oh boy. now to make plymouth draw pretty *text*
  # we want to left-align all the text, so we're gonna order the sprites
  # in that direction
  # we're gonna rely more on the height to sort out text scaling...
  local.text_right_align;
  local.text_top_boundary;
  local.text_scale_target;
  local.text_target_size;
  local.pixel_shift;
  # adjust the multipliers here to shift by more pixels, if you like
  if (id == "srv") {
    pixel_shift = -60;
  } else {
    pixel_shift = 1;
  }
  text_right_align = Math.Int((scale_factor * pixel_shift) + pos_sprite.X + mainimage.scaled.GetWidth());
  text_top_boundary = Math.Int(mainimage.posY + mainimage.sizeY);
  text_scale_target = Math.Int(H / 9);
  text_target_size = 64;

  # we put the space with the version number so it's condensed to shit
  local.version;
  image[id].version_source = Image.Text(" " + distro.version, 0, 0, 0, 1, "Libre Franklin Regular 80");
  # fuck with the X scale to compress the version number (emulate narrow font?)
  version.sizeY = Math.Int(image[id].version_source.GetHeight() / text_target_size * text_scale_target * 0.5);
  # !!! below is reused for aligning the *next row* (edition) of text too !!!
  version.sizeX = Math.Int(text_scale_target);
  version.scaled = version.text.Scale(version.sizeX, version.sizeY);
  image[id].version_sprite = Sprite();
  image[id].version_sprite.SetOpacity(0);
  image[id].version_sprite.SetImage(version.scaled);
  image[id].version_sprite.SetPosition(text_right_align,
                                       text_top_boundary,
                                       mainimage_z);

  local.dt;
  image[id].distro_source = Image.Text(distro.name, 0, 0, 0, 1, "Libre Franklin Black 100");
  # we're not trying to condense the distro name, notably.
  dt.sizeX = Math.Int(image[id].distro_source.GetHeight() / text_target_size * text_scale_target);
  # in fact we made it bigger
  dt.sizeY = Math.Int(text_scale_target * 1.2);
  dt.scaled = image[id].distro_source.Scale(dt.sizeX, dt.sizeY);
  image[id].distro_sprite = Sprite();
  image[id].distro_sprite.SetOpacity(0);
  image[id].distro_sprite.SetImage(dt.scaled);
  image[id].distro_sprite.SetPosition(text_right_align - dt.sizeX,
                                      # compensate for us making the text bigger
                                      Math.Int(text_top_boundary - (dt.sizeY * 0.1)),
                                      mainimage_z);

  local.edition;
  image[id].edition_source = Image.Text(distro.edition, 0, 0, 0, 1, "Libre Franklin Black 90");
  edition.sizeX = Math.Int(image[id].edition_source.GetHeight() / text_target_size * text_scale_target);
  # scrungle
  edition.sizeY = Math.Int(text_scale_target * 0.5);
  edition.scaled = image[id].edition_source.Scale(edition.sizeX, edition.sizeY);
  image[id].edition_sprite = Sprite();
  image[id].edition_sprite.SetOpacity(0);
  image[id].edition_sprite.SetImage(edition.scaled);
  image[id].edition_sprite.SetPosition(text_right_align + (version.sizeX / 2) - edition.sizeX,
                                       text_top_boundary + version.sizeY - (edition.sizeY / 2),
                                       mainimage_z);
}

# enable a logo and associated text
fun image_reveal (id, opacity) {
  image[id].sprite.SetOpacity(opacity);
  image[id].version_sprite.SetOpacity(opacity);
  image[id].distro_sprite.SetOpacity(opacity);
  image[id].edition_sprite.SetOpacity(opacity);
  image[id].boxfill_sprite.SetOpacity(opacity);
  # the positioning sprite shouldn't be normally defined
  image[id].pos_sprite.SetOpacity(opacity * 0.5);
}

# the first two args are scale factors from the source image
# the next two args are positioning in the source image relative to the
# screen center.
# all the numbers around this and the function are *kinda right* don't be picky.
# the fifth argument here is the size of the side of a square inside the nest...
# and the two args after that are the x/y of where that square begins.
image_sprite("pro", 3.0622, 2.448979, -54, -146, 145, 20, 13);
image_sprite("srv", 2.75862, 2.448979, -123, -165, 131, 55, 18);

# something that sorks as the alternate rendering (for verbose/status boots)
alts = [];
altimage_z = -4000;
altarea_ratio = spinline.alt / W;

fun image_altsprite(id, squareEdge, origSquareX, origSquareY) {
  global.alts;

  local.destHeight;
  # now, out of the top bar space, we use about 5/6? let's try it.
  # we're gonna focus a lot on spinline.alt as a holder.
  destHeight = Math.Int((spinline.alt / 6) * 4);

  # rather than forcing the inlay to the scaling factor, we just try all we can in the top area.
  local.mainimage;
  mainimage.source = Image("squares-alt-" + id + ".png");
  mainimage.sizeX = Math.Int((destHeight / mainimage.source.GetHeight()) * mainimage.source.GetWidth());
  # so, sizeY _is_ destHeight
  mainimage.scaled = mainimage.source.Scale(mainimage.sizeX, destHeight);
  # position it 1/6th across the full screen
  mainimage.posX = W / 6;
  mainimage.posY = (spinline.alt / 2) - (destHeight / 2);
  alts[id].sprite = Sprite();
  alts[id].sprite.SetOpacity(0);
  alts[id].sprite.SetImage(mainimage.scaled);
  alts[id].sprite.SetPosition(mainimage.posX, mainimage.posY, altimage_z);

  # handle the box inlay image
  local.scale_factor;
  scale_factor = (mainimage.sizeX / mainimage.source.GetWidth());
  local.boxedge;
  boxedge.size = Math.Int(squareEdge * scale_factor);
  # size we wish to put in box
  local.altbox;
  altbox.size = Math.Int(boxedge.size * 0.9);
  # pull the *source* image out of the main image stack
  global.boxfill;
  altbox.scaled = boxfill.source.Scale(altbox.size, altbox.size);
  # place the box in the center of the empty space.
  altbox.space.centerX = Math.Int(mainimage.posX + (origSquareX * scale_factor) + (boxedge.size / 2));
  altbox.space.centerY = Math.Int(mainimage.posY + (origSquareY * scale_factor) + (boxedge.size / 2));
  altbox.fill.posX = altbox.space.centerX - (altbox.scaled.GetWidth() / 2);
  altbox.fill.posY = altbox.space.centerY - (altbox.scaled.GetHeight() / 2);
  alts[id].boxsprite = Sprite();
  alts[id].boxsprite.SetOpacity(0);
  alts[id].boxsprite.SetImage(altbox.scaled);
  alts[id].boxsprite.SetPosition(altbox.fill.posX, altbox.fill.posY, altimage_z + 1);

  # we stole the text from the main image...
  local.version;
  global.spinline;
  version.sizeY = Math.Int(destHeight / 1.35);
  version.sizeX = Math.Int((version.sizeY / image[id].version_source.GetHeight()) * image[id].version_source.GetWidth());
  version.scaled = image[id].version_source.Scale(version.sizeX, version.sizeY);
  alts[id].version_sprite = Sprite();
  alts[id].version_sprite.SetOpacity(0);
  alts[id].version_sprite.SetImage(version.scaled);
  alts[id].version_sprite.SetPosition((mainimage.posX * 5) - version.sizeX,
                                       Math.Int(((spinline.alt / 3) * 2) - (version.sizeY * 0.9)),
                                       altimage_z);

  local.dt;
  dt.sizeY = Math.Int(destHeight);
  dt.sizeX = Math.Int((dt.sizeY / image[id].distro_source.GetHeight()) * image[id].distro_source.GetWidth());
  dt.scaled = image[id].distro_source.Scale(dt.sizeX, dt.sizeY);
  alts[id].distro_sprite = Sprite();
  alts[id].distro_sprite.SetOpacity(0);
  alts[id].distro_sprite.SetImage(dt.scaled);
  alts[id].distro_sprite.SetPosition((mainimage.posX * 5) - version.sizeX - dt.sizeX,
                                     Math.Int(((spinline.alt / 3) * 2) - dt.sizeY + (dt.sizeY / 8)),
                                     altimage_z);

  local.edition;
  edition.referenceI = Math.Int(destHeight);
  edition.sizeY = Math.Int(edition.referenceI * 0.28);
  edition.sizeX = Math.Int((edition.referenceI / image[id].edition_source.GetHeight()) * image[id].version_source.GetWidth());
  edition.scaled = image[id].edition_source.Scale(edition.sizeX, edition.sizeY);
  alts[id].edition_sprite = Sprite();
  alts[id].edition_sprite.SetOpacity(0);
  alts[id].edition_sprite.SetImage(edition.scaled);
  alts[id].edition_sprite.SetPosition((mainimage.posX * 5) - edition.sizeX,
                                      Math.Int(((spinline.alt / 3) * 2) - (edition.sizeY / 3)),
                                      altimage_z);
}

# draw a black box, then a blue box inside it for *messages*
# this part's gonna be anachronistic.
blackbox.sizeX = W - 2;
# you're gonna have to read between the lines
blackbox.sizeY = spinline.center - spinline.alt - spinline.scale;
blackbox.posX = 1;
blackbox.posY = spinline.alt + 1;
blackbox.sprite = Sprite();
blackbox.sprite.SetOpacity(0);
blackbox.sprite.SetImage(Image("black.png").Scale(blackbox.sizeX, blackbox.sizeY));
blackbox.sprite.SetPosition(blackbox.posX, blackbox.posY, statbars_z - 50);

bluebox.sizeX = blackbox.sizeX - 8;
bluebox.sizeY = blackbox.sizeY - 8;
bluebox.posX = blackbox.posX + 4;
bluebox.posY = blackbox.posY + 4;
bluebox.sprite = Sprite();
bluebox.sprite.SetOpacity(0);
bluebox.sprite.SetImage(Image("blue.png").Scale(bluebox.sizeX, bluebox.sizeY));
bluebox.sprite.SetPosition(bluebox.posX, bluebox.posY, statbars_z - 40);

# record some information fox text games in alternate screens
fontfill.source = Image.Text("▓", 0, 0, 0, 1, "Anonymous Pro 40");
fontfill.cols = 80;
fontfill.targetWidth = (bluebox.sizeX / fontfill.cols);
fontfill.ratio = fontfill.targetWidth / fontfill.source.GetWidth();
fontfill.charSizeX = Math.Int(fontfill.source.GetWidth() * fontfill.ratio);
fontfill.charSizeY = Math.Int(fontfill.source.GetHeight() * fontfill.ratio);
fontfill.startX = bluebox.posX;
fontfill.startY = bluebox.posY;
fontfill.midCols = fontfill.cols / 2;
fontfill.midX = bluebox.posX + (fontfill.charSizeX * fontfill.midCols);
fontfill.lines = Math.Int(bluebox.sizeY / fontfill.charSizeY);
fontfill.midLines = Math.Int(fontfill.lines / 2);
fontfill.midY = bluebox.posY + (fontfill.charSizeY * fontfill.midLines);

fun alt_reveal (id, opacity) {
  alts[id].sprite.SetOpacity(opacity);
  alts[id].version_sprite.SetOpacity(opacity);
  alts[id].distro_sprite.SetOpacity(opacity);
  alts[id].edition_sprite.SetOpacity(opacity);
  alts[id].boxsprite.SetOpacity(opacity);
  blackbox.sprite.SetOpacity(opacity);
  bluebox.sprite.SetOpacity(opacity);
}

image_altsprite("pro", 55, 5, 5);
image_altsprite("srv", 58, 39, 11);

# hook the boot progress callback to update the spinner, progress bar
fun progress_callback (time, prog) {
  spinline_Animate(time);
  progbar_Advance(prog);
}
Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Dialog --------------------------------

# we call on the dialog we haven't made yet (to turn it off) for normal callbacks.
fun display_normal_callback () {
  global.status = "normal";
  if (global.dialog) {
    dialog_opacity (0);
  }

  alt_reveal(style, 0);
  spinline_Move(spinline.center);
  image_reveal(style, 1);

}
Plymouth.SetDisplayNormalFunction(display_normal_callback);

fun dialog_setup() {
  global.fontfill;
  global.bluebox;
  local.box;
  local.entry;
  local.fn;
  local.a8;

  a8 = 160 / 255;

  fn = "Anonymous Pro 40";
  box.pipechar = Image.Text("║", 0, 0, 0, 1, fn);
  box.boxchar = Image.Text("▓", 0, 0, 0, 1, fn);
  # a fixed width font is not a fixed-height one, soooo
  box.scaleBigBlocksY = (box.boxchar.GetHeight() / box.pipechar.GetHeight());
  box.halfScaleBigBlocksY = box.scaleBigBlocksY / 2;
  box.bigCorrection = Math.Int(fontfill.charSizeY * box.halfScaleBigBlocksY / 2);

  box.charCount = 32;
  box.lineCount = 10;
  box.sizeX = fontfill.charSizeX * box.charCount;
  box.image1 = Image.Text("╔══════════════════════════════╗", a8, a8, a8, 1, fn).Scale(box.sizeX, fontfill.charSizeY);
  box.image2 = Image.Text("║     SYSTEM BOOT SECURITY     ║", a8, a8, a8, 1, fn).Scale(box.sizeX, fontfill.charSizeY);
  box.image3 = Image.Text("╟──███─────────────────────────╢", a8, a8, a8, 1, fn).Scale(box.sizeX, fontfill.charSizeY * box.scaleBigBlocksY);
  box.image4 = Image.Text("║ █   █  Enter Password:       ║", a8, a8, a8, 1, fn).Scale(box.sizeX, fontfill.charSizeY * box.scaleBigBlocksY);
  box.image5 = Image.Text("║███████                       ║", a8, a8, a8, 1, fn).Scale(box.sizeX, fontfill.charSizeY * box.scaleBigBlocksY);
  box.image6 = Image.Text("╚███████═══════════════════════╝", a8, a8, a8, 1, fn).Scale(box.sizeX, fontfill.charSizeY * box.scaleBigBlocksY);
  entry.image = Image.Text("▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓", 1, 1, 1, 1, fn).Scale(fontfill.charSizeX * 20, fontfill.charSizeY * box.scaleBigBlocksY);
 
  # render the password entry box
  box.sprite1 = Sprite(box.image1);
  box.sprite2 = Sprite(box.image2);
  box.sprite3 = Sprite(box.image3);
  box.sprite4 = Sprite(box.image4);
  box.sprite5 = Sprite(box.image5);
  box.sprite6 = Sprite(box.image6);
  # we're actually kind fudging the horizontal alignment?
  box.startX = screen_center.x - (Math.Int(box.charCount / 2) * fontfill.charSizeX);
  box.startY = fontfill.midY - (Math.Int(box.lineCount / 2) * fontfill.charSizeY);
  box.y2 = box.startY + fontfill.charSizeY;
  box.y3 = box.startY + (fontfill.charSizeY * 2) - box.bigCorrection;
  box.y4 = box.startY + (fontfill.charSizeY * 3) - box.bigCorrection;
  box.y5 = box.startY + (fontfill.charSizeY * 4) - box.bigCorrection;
  box.y6 = box.startY + (fontfill.charSizeY * 5) - box.bigCorrection;
  box.z = 10000;
  box.sprite1.SetPosition(box.startX, box.startY, box.z);
  box.sprite2.SetPosition(box.startX, box.y2, box.z);
  box.sprite3.SetPosition(box.startX, box.y3, box.z);
  box.sprite4.SetPosition(box.startX, box.y4, box.z);
  box.sprite5.SetPosition(box.startX, box.y5, box.z);
  box.sprite6.SetPosition(box.startX, box.y6, box.z);

  entry.sprite = Sprite(entry.image);
  entry.x = box.startX + (fontfill.charSizeX * 10);
  entry.y = box.startY + (fontfill.charSizeY * 4) - box.bigCorrection;
  entry.z = box.z + 1;
  entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
  global.dialog.box = box;
  global.dialog.entry = entry;
  global.dialog.bullet_image = Image.Text("•", 1, 0.5, 0.5, 1, fn).Scale(fontfill.charSizeX, fontfill.charSizeY);
  dialog_opacity (1);
}
    
fun dialog_opacity(opacity) {
  image_reveal(style, 1 - opacity);
  if (opacity > 0) {
    spinline_Move(spinline.alt);
  } else {
    spinline_Move(spinline.center);
  }
  alt_reveal(style, opacity);

  dialog.box.sprite1.SetOpacity (opacity);
  dialog.box.sprite2.SetOpacity (opacity);
  dialog.box.sprite3.SetOpacity (opacity);
  dialog.box.sprite4.SetOpacity (opacity);
  dialog.box.sprite5.SetOpacity (opacity);
  dialog.box.sprite6.SetOpacity (opacity);

  dialog.entry.sprite.SetOpacity (opacity);
  for (index = 0; dialog.bullet[index]; index++) {
    dialog.bullet[index].sprite.SetOpacity(opacity);
  }
}


fun display_password_callback (prompt, bullets) {
  global.status = "password";
  if (!global.dialog)
  dialog_setup();
  else
  dialog_opacity(1);
  for (index = 0; dialog.bullet[index] || index < bullets; index++) {
    if (!dialog.bullet[index]) {
      dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
      dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
      dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
      dialog.bullet[index].z = dialog.entry.z + 1;
      dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
    }
    if (index < bullets) {
      dialog.bullet[index].sprite.SetOpacity(1);
    } else {
      dialog.bullet[index].sprite.SetOpacity(0);
    }
  }
}

Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback () {}
Plymouth.SetQuitFunction(quit_callback);
